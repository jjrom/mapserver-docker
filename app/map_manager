#!/usr/bin/python3
# -*- coding: utf-8 -*-

import os, sys, json

targetMapDir = '/map/tmp/'
targetEndpointDir = '/tmp/'

HTTPStatus = {
    "OK":200,
    "Unauthorized":401,
    "Forbidden":403,
    "Not Found":404,
    "Bad Request":400
}

def error(errorMessage):
    code = HTTPStatus[errorMessage] if errorMessage in HTTPStatus else 500
    print("HTTP/1.0 " + str(code) + " " + errorMessage)
    print("Content-type: application/json")
    print("")
    print(json.dumps({
        "ErrorMessage":errorMessage,
        "ErrorCode":code
    }))
    quit()

# ----------------------------------------------------------

# ADMIN_TOKEN is environment variable set in container
if not "ADMIN_TOKEN" in os.environ:
    error("[GRAVE] Missing ADMIN_TOKEN environment variable")

if not "PUBLIC_ENDPOINT" in os.environ:
    error("[GRAVE] Missing PUBLIC_ENDPOINT environment variable")

REQUEST_METHOD = os.environ["REQUEST_METHOD"] if "REQUEST_METHOD" in os.environ else None
REQUEST_URI = os.environ["REQUEST_URI"] if "REQUEST_URI" in os.environ else None
HTTP_AUTHORIZATION = os.environ["HTTP_AUTHORIZATION"] if "HTTP_AUTHORIZATION" in os.environ else None

# Not available endpoints
if not REQUEST_URI or not REQUEST_METHOD or REQUEST_METHOD == "GET" or REQUEST_METHOD == "PUT":
    error("Not Found")

uriParts = REQUEST_URI.strip('/').split('/')
if len(uriParts) != 2:
    error("Not Found")

if not HTTP_AUTHORIZATION or not HTTP_AUTHORIZATION.startswith("Bearer "):
    error("Unauthorized")
     
if HTTP_AUTHORIZATION[7:len(HTTP_AUTHORIZATION)] != os.environ["ADMIN_TOKEN"]:
    error("Forbidden")

# Store map file if not exist
mapFileNoExtension = os.path.splitext(uriParts[1])[0]
mapFilePath = targetMapDir + mapFileNoExtension + '.map'

# Delete file
if REQUEST_METHOD == "DELETE":
    if not os.path.isfile(mapFilePath):
        error("Not Found")
    else:
        os.remove(mapFilePath)
        message = {
            "status":"success",
            "message":"Delete " + mapFileNoExtension
        }
else:
    if not os.path.isfile(mapFilePath):
        f = open(mapFilePath, "w")
        f.write(sys.stdin.read())
        f.close()
    message = {
        "status":"success",
        "message":"Upload " + mapFileNoExtension,
        "endpoint": os.environ["PUBLIC_ENDPOINT"] + targetEndpointDir + mapFileNoExtension
    }

print("HTTP/1.0 200 OK")
print("Content-type: text/plain")
print("")
print(json.dumps(message))

